import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

// Define the Skill and SkillCategory interfaces
interface Skill {
  id: number;
  name: string;
  categoryId: number;
  userId: number;
}

// Define your skill API slice
export const skillApi = createApi({
  reducerPath: 'skillApi',
  baseQuery: fetchBaseQuery({
    baseUrl: 'http://localhost:8000',  // Your API base URL
    prepareHeaders: (headers) => {
      // Include the token if it's available in local storage
      const token = localStorage.getItem('token');
      if (token) {
        headers.set('authorization', `Bearer ${token}`);
      }
      return headers;
    },
  }),
  endpoints: (builder) => ({
    // Fetch skills for a user
    getSkillsByUserId: builder.query<Skill[], number>({
      query: (userId) => `/skills/${userId}`,  // Fetches skills for a specific user
    }),

    // Add a new skill to a user
    addSkill: builder.mutation<Skill, Partial<Skill>>({
      query: (newSkill) => ({
        url: `/skills`,
        method: 'POST',
        body: newSkill,
      }),
    }),

    // Optional: Update a skill
    updateSkill: builder.mutation<Skill, Partial<Skill>>({
      query: ({ id, ...rest }) => ({
        url: `/skills/${id}`,
        method: 'PUT',
        body: rest,
      }),
    }),

    // Optional: Delete a skill
    deleteSkill: builder.mutation<{ success: boolean; id: number }, number>({
      query: (id) => ({
        url: `/skills/${id}`,
        method: 'DELETE',
      }),
    }),
  }),
});

// Export the hooks generated by the skillApi
export const {
  useGetSkillsByUserIdQuery,
  useAddSkillMutation,
  useUpdateSkillMutation,
  useDeleteSkillMutation,
} = skillApi;
